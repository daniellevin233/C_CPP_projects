/**
 * @file calculator.c
 * @author  Ofek Rafaeli
 * @version 1.0
 * @date 19/08/2018
 *
 * @brief a calcualtor to determine the spreading of heat on a 2d surface. 
 *
 * @section LICENSE
 * This program is a part of a course ex in the course 67318 in huji
 *
 * @section DESCRIPTION
 * calculates the spreading of heat along a 2d surface according to a given function
 * Input  : a function that mimics the spreading of heat, a 2d double array of heat sources and a 
 * plain, it's size (column and row size), an array of heat sources on it, and it's size, 
 * a termination value, the number of iterations to mimic the spreading of heat, and whether or not 
 * the plain is cyclc. 
 * Process: running the loop up until the termination value is reached, or until the number of 
 * cycles is done 
 * Output : printing to stdin the result. 
 */

// ------------------------------ includes ------------------------------

#include<stdio.h>
#include "calculator.h"

#define FALSE 0
#define TRUE 1
#define OUT_OF_BOUNDS (-1)


#define CELL_INDEX 0
#define RIGHT_INDEX 1
#define ABOVE_INDEX 2
#define LEFT_INDEX 3
#define BELOW_INDEX 4


double heatSumCalc(double *const *grid, size_t n, size_t m);

int isSource(const source_point *sources, size_t num_sources, int row, int column);

int cycleIndex(int index, size_t maxLength);

int nonCycleIndex(int index, size_t maxLength);

void nonCycleRowValuesLoad(double *const *grid, size_t n, int rowAboveIndex, int rowBellowIndex,
						   double *neighborsValues, int column);

void nonCycleColumnValuesLoad(double *const *grid, size_t m, int columnRightIndex,
							  int columnLeftIndex, double *neighborsValues, int row);

void cycleRowValuesLoad(double *const *grid, size_t n, int rowAboveIndex, int rowBellowIndex,
						double *neighborsValues, int column);

void cycleColumnValuesLoad(double *const *grid, size_t m, int columnRightIndex, int columnLeftIndex,
						   double *neighborsValues, int row);


void relaxationCalculation(diff_func function, double **grid, size_t n, size_t m,
						   const source_point *sources, size_t num_sources, int is_cyclic);

void printGrid(double **grid, size_t rowSize, size_t colSize);

double calculate(diff_func function, double **grid, size_t n, size_t m, source_point *sources,
				 size_t num_sources, double terminate, unsigned int n_iter, int is_cyclic)
{
	double heatSumPreIteration = 0, heatSumPostIteration = 0, diff = terminate + 1;
	if(n_iter)
	{
		while (n_iter)
		{ //todo - pretify
			heatSumPreIteration = heatSumCalc(grid, n, m);
			relaxationCalculation(function, grid, n, m, sources, num_sources, is_cyclic);
			heatSumPostIteration = heatSumCalc(grid, n, m);
			diff = heatSumPostIteration - heatSumPreIteration;
			n_iter--;
		}
	}
	else
	{
		while (diff>terminate)
		{
			heatSumPreIteration = heatSumCalc(grid, n, m);
			relaxationCalculation(function, grid, n, m, sources, num_sources, is_cyclic);
			heatSumPostIteration = heatSumCalc(grid, n, m);
			diff = heatSumPostIteration - heatSumPreIteration;
		}
	}
	printf("%f\n", diff);
	printGrid(grid, n, m);
	return diff;

}

void printGrid(double **grid, size_t rowSize, size_t colSize)
{
	for (int i = 0; i < (int)rowSize; i++)
	{
		for (int j = 0; j < (int)colSize; j++)
		{
			printf("%.4f,", grid[i][j]);
		}
		printf("\n");
	}
}


void relaxationCalculation(diff_func function, double **grid, size_t n, size_t m,
						   const source_point *sources, size_t num_sources, int is_cyclic)
{
	double calcsValues[5]; //todo - const
	for (int row = 0; row < (int) n; row++)
	{
		for (int column = 0; column < (int) m; column++)
		{
			if (!isSource(sources, num_sources, row, column))
			{
				if (is_cyclic)
				{
					cycleRowValuesLoad(grid, n, row - 1, row + 1, calcsValues, column);
					cycleColumnValuesLoad(grid, m, column + 1, column - 1, calcsValues, row);

				}
				else
				{ //TODO - pretify
					nonCycleRowValuesLoad(grid, n, row - 1, row + 1, calcsValues, column);
					nonCycleColumnValuesLoad(grid, m, column + 1, column - 1, calcsValues, row);
				}
				calcsValues[CELL_INDEX] = grid[row][column];
				grid[row][column] = function(calcsValues[CELL_INDEX], calcsValues[RIGHT_INDEX],
											 calcsValues[ABOVE_INDEX], calcsValues[LEFT_INDEX],
											 calcsValues[BELOW_INDEX]);
			}
		}
	}
}


void cycleColumnValuesLoad(double *const *grid, size_t m, int columnRightIndex, int columnLeftIndex,
					  double *neighborsValues, int row)
{
	columnRightIndex = cycleIndex(columnRightIndex, m);
	neighborsValues[RIGHT_INDEX] = grid[row][columnRightIndex];

	columnLeftIndex = cycleIndex(columnLeftIndex, m);
	neighborsValues[LEFT_INDEX] = grid[row][columnLeftIndex];
}


void cycleRowValuesLoad(double *const *grid, size_t n, int rowAboveIndex, int rowBellowIndex,
						double *neighborsValues, int column)
{
	rowAboveIndex = cycleIndex(rowAboveIndex, n);
	neighborsValues[ABOVE_INDEX] = grid[rowAboveIndex][column];

	rowBellowIndex = cycleIndex(rowBellowIndex, n);
	neighborsValues[BELOW_INDEX] = grid[rowBellowIndex][column];
}


void nonCycleColumnValuesLoad(double *const *grid, size_t m, int columnRightIndex,
							  int columnLeftIndex,
							  double *neighborsValues, int row)
{
	columnRightIndex = nonCycleIndex(columnRightIndex, m);
	if (columnRightIndex == OUT_OF_BOUNDS)
	{
		neighborsValues[RIGHT_INDEX] = 0;
	}
	else
	{
		neighborsValues[RIGHT_INDEX] = grid[row][columnRightIndex];
	}


	columnLeftIndex = nonCycleIndex(columnLeftIndex, m);
	if (columnLeftIndex == OUT_OF_BOUNDS)
	{
		neighborsValues[LEFT_INDEX] = 0;
	}
	else
	{
		neighborsValues[LEFT_INDEX] = grid[row][columnLeftIndex];
	}
}

void nonCycleRowValuesLoad(double *const *grid, size_t n, int rowAboveIndex, int rowBellowIndex,
						   double *neighborsValues, int column)
{
	rowAboveIndex = nonCycleIndex(rowAboveIndex, n);
	if (rowAboveIndex == OUT_OF_BOUNDS)
	{
		neighborsValues[ABOVE_INDEX] = 0;
	}
	else
	{
		neighborsValues[ABOVE_INDEX] = grid[rowAboveIndex][column];
	}
	rowBellowIndex = nonCycleIndex(rowBellowIndex, n);
	if (rowBellowIndex == OUT_OF_BOUNDS)
	{
		neighborsValues[BELOW_INDEX] = 0;
	}
	else
	{
		neighborsValues[BELOW_INDEX] = grid[rowBellowIndex][column];
	}
}

int nonCycleIndex(int index, size_t maxLength)
{
	if (index < 0 || index >= (int) maxLength)
	{
		return OUT_OF_BOUNDS;
	}
	return index;
}


int cycleIndex(int index, size_t maxLength)
{
	if (index < 0)
	{
		return (int) maxLength + index;
	}
	else if (index >= (int) maxLength)
	{
		return index - (int) maxLength;
	}
	return index;
}


int isSource(const source_point *sources, size_t num_sources, int row, int column)
{
	for (int i = 0; i < (int) num_sources; i++)
	{
		if (sources[i].x == row && sources[i].y == column)
		{
			return TRUE;
		}
	}
	return FALSE;
}


//todo - check bad input on first line (or any other line)